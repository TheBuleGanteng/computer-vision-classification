# This is an Nginx configuration file for serving multiple applications

# HTTP server - redirects to HTTPS (Business site)
server {
    listen 80;
    server_name kebayorantechnologies.com www.kebayorantechnologies.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTP server - redirects to HTTPS (Personal site)
server {
    listen 80;
    server_name mattmcdonnell.net www.mattmcdonnell.net;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server - Business website (kebayorantechnologies.com)
server {
    listen 443 ssl;
    http2 on;
    server_name kebayorantechnologies.com www.kebayorantechnologies.com;

    # SSL Certificate Configuration
    ssl_certificate /etc/letsencrypt/live/kebayorantechnologies.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/kebayorantechnologies.com/privkey.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Handle static files at root level (fallback for Django static files)
    location /static/ {
        proxy_pass http://rag-app:8001/static/;
        proxy_set_header Host $host;
        expires 1h;
        add_header Cache-Control "public";
    }

    # RAG Static files
    location /rag/static/ {
        proxy_pass http://rag-app:8001/static/;
        proxy_set_header Host $host;
        expires 1h;
        add_header Cache-Control "public";
    }

    # RAG Media files
    location /rag/media/ {
        proxy_pass http://rag-app:8001/media/;
        proxy_set_header Host $host;
        expires 1h;
        add_header Cache-Control "public";
    }

    # RAG Admin interface
    location /rag/admin/ {
        proxy_pass http://rag-app:8001/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Script-Name /rag;
    }

    # RAG Django application - serve at /rag/aichat/ and /rag/admin/
    location /rag/aichat/ {
        proxy_pass http://rag-app:8001/aichat/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Script-Name /rag;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # RAG Django API endpoints
    location /aichat/ {
        proxy_pass http://rag-app:8001/aichat/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Script-Name /rag;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Computer Vision Classification - TensorBoard Direct Proxy
    # IMPORTANT: This MUST come before other /api/ locations to take precedence
    # Pattern matches: /model-architecture/computer-vision/tensorboard/{jobId}/ and /model-architecture/computer-vision/tensorboard/{jobId}/path/to/asset
    location ~ ^/model-architecture/computer-vision/tensorboard/([^/]+)(/.*)?$ {
        # Regex captures: $1 = jobId, $2 = remaining path (e.g., /index.js, /font-roboto/file.woff2)
        set $job_id $1;
        set $tb_path $2;

        # Proxy directly to backend's TensorBoard proxy endpoint
        # Backend will look up the correct port for this job and forward the request
        proxy_pass http://computer-vision-classification-backend:8000/tensorboard-direct/$job_id$tb_path;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Disable buffering for real-time TensorBoard updates
        proxy_buffering off;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
    }

    # Computer Vision Classification - Backend API (including TensorBoard control endpoints)
    location /model-architecture/computer-vision/api/jobs/ {
        proxy_pass http://computer-vision-classification-backend:8000/jobs/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
    }

    # Computer Vision Classification - Backend API (other endpoints like /optimize)
    location /model-architecture/computer-vision/api/ {
        proxy_pass http://computer-vision-classification-backend:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
    }

    # Computer Vision Classification - Next.js app
    location /model-architecture/computer-vision {
        proxy_pass http://computer-vision-classification-frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main business website (Next.js) - serve at root
    location / {
        proxy_pass http://business-website:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# HTTPS server - Personal website (mattmcdonnell.net)
server {
    listen 443 ssl;
    http2 on;
    server_name mattmcdonnell.net www.mattmcdonnell.net;

    # SSL Certificate Configuration (you'll need to obtain this)
    ssl_certificate /etc/letsencrypt/live/mattmcdonnell.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mattmcdonnell.net/privkey.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Personal website (Next.js) - serve at root
    location / {
        proxy_pass http://personal-website:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
